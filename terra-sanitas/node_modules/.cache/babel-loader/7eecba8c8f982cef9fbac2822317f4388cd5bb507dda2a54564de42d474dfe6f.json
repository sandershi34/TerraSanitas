{"ast":null,"code":"import Web3 from 'web3';\nimport tsContractBuild from 'contracts/terraSanitas.json';\nimport app from \"./App\";\nlet selectedAccount;\nlet tsContract;\nlet isInitialized = false;\nexport const init = async () => {\n  let provider = window.ethereum;\n  if (typeof provider !== 'undefined') {\n    provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      console.log(selectedAccount);\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n    window.ethereum.on('accountshanged', function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(selectedAccount);\n    });\n  }\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  tsContract = new web3.eth.Contract(tsContractBuild.abi, tsContractBuild.networks[networkId].address);\n  isInitialized = true;\n};\nexport const GetUsers = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  //await tsContract.methods.viewParticipants().send({from:selectedAccount})\n  return await tsContract.methods.viewParticipants().send({\n    from: selectedAccount\n  });\n};\n_c = GetUsers;\nexport const RegisterUser = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  return await tsContract.methods.register().send({\n    from: selectedAccount\n  });\n};\n_c2 = RegisterUser;\nexport const DeregisterUser = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  return await tsContract.methods.deregister().send({\n    from: selectedAccount\n  });\n};\n_c3 = DeregisterUser;\nexport const UploadInfo = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  return await tsContract.methods.upload().send({\n    from: selectedAccount\n  });\n};\n_c4 = UploadInfo;\nexport const RequestInfo = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  await tsContract.methods.request().send({\n    from: selectedAccount\n  });\n  app.getList();\n};\n_c5 = RequestInfo;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GetUsers\");\n$RefreshReg$(_c2, \"RegisterUser\");\n$RefreshReg$(_c3, \"DeregisterUser\");\n$RefreshReg$(_c4, \"UploadInfo\");\n$RefreshReg$(_c5, \"RequestInfo\");","map":{"version":3,"names":["Web3","tsContractBuild","app","selectedAccount","tsContract","isInitialized","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","networkId","eth","net","getId","Contract","abi","networks","address","GetUsers","methods","viewParticipants","send","from","RegisterUser","register","DeregisterUser","deregister","UploadInfo","upload","RequestInfo","getList"],"sources":["C:/Users/sande/OneDrive/Desktop/new project/TerraSanitas/terra-sanitas/src/Web3Client.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport tsContractBuild from 'contracts/terraSanitas.json'\r\nimport app from \"./App\";\r\nlet selectedAccount;\r\nlet tsContract;\r\nlet isInitialized = false;\r\n\r\nexport const init = async() => {\r\n\r\n        let provider = window.ethereum;\r\n        \r\n        if(typeof provider !== 'undefined'){\r\n\r\n            provider\r\n                .request({method:'eth_requestAccounts'})\r\n                .then((accounts)=>{\r\n                    selectedAccount = accounts[0]\r\n                    console.log(selectedAccount)\r\n                }).catch((err)=>{\r\n                    console.log(err)\r\n                    return\r\n                })\r\n\r\n            window.ethereum.on('accountshanged', function (accounts){\r\n                selectedAccount = accounts[0];\r\n                console.log(selectedAccount)\r\n            })\r\n        }\r\n\r\n        const web3 = new Web3(provider);\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n\r\n        tsContract = new web3.eth.Contract(tsContractBuild.abi,tsContractBuild.networks[networkId].address)\r\n        \r\n        isInitialized = true;\r\n}\r\n\r\nexport const GetUsers = async() =>{\r\n    if( !isInitialized ){\r\n        await init();\r\n    }\r\n    //await tsContract.methods.viewParticipants().send({from:selectedAccount})\r\n    return await tsContract.methods.viewParticipants().send({from:selectedAccount})\r\n}\r\n\r\nexport const RegisterUser = async() =>{\r\n    if( !isInitialized ){\r\n        await init();\r\n    }\r\n    return await tsContract.methods.register().send({from:selectedAccount})\r\n}\r\nexport const DeregisterUser = async() =>{\r\n    if( !isInitialized ){\r\n        await init();\r\n    }\r\n    return await tsContract.methods.deregister().send({from:selectedAccount})\r\n}\r\nexport const UploadInfo = async() =>{\r\n    if( !isInitialized ){\r\n        await init();\r\n    }\r\n    return await tsContract.methods.upload().send({from:selectedAccount})\r\n}\r\n\r\nexport const RequestInfo = async() =>{\r\n    if( !isInitialized ){\r\n        await init();\r\n    }\r\n    await tsContract.methods.request().send({from:selectedAccount})\r\n    app.getList();\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}